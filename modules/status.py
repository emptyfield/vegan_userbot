from pyrogram import Client, types
from pyrogram.filters import regex
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.job import Job

from utils.filters import f_cmd
from utils.res_header import res_header
from constants import battle_time


def add_handlers(user):
    client: Client = user.client
    scheduler: AsyncIOScheduler = user.scheduler

    @client.on_message(f_cmd & regex(r'^\+status$'))
    async def status(c: Client, m: types.Message):
        job = scheduler.get_job(f'{c.name}/vfarm')
        is_paused = user.state.get('is_farm_paused')

        no_orders = 'ü¶ó–ù–µ—Ç –ø—Ä–∏–∫–∞–∑–æ–≤!'

        body = '–ê–≤—Ç–æ–ø–∞—Ç—Ä—É–ª—å: '
        match job, is_paused:
            case None, False: body += '‚èπ–û—Ç–∫–ª—é—á–µ–Ω\n'
            case None, True: body += '‚è∏–ü–∞—É–∑–∞\n'
            case Job, False: body += '‚ñ∂Ô∏è–†–∞–±–æ—Ç–∞–µ—Ç\n'
            case _: body += 'üö´–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–ø–∞—Ç—Ä—É–ª—å. –°–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –æ —Ç–æ–º, –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n'

        body += '–ê–≤—Ç–æ–ø–æ–≥: '
        match user.state.get('autopog_started'):
            case None: body += '‚ùå–û—Ç–∫–ª—é—á–µ–Ω\n'
            case _: body += '‚úÖ–í–∫–ª—é—á–µ–Ω\n'

        quest_msg = user.cache.get('quests_msg')

        body += 'ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤: '
        match quest_msg:
            case None: body += '–ù–µ—Ç ID!\n'
            case _: body += (str(quest_msg) + '\n')

        plan = user.cache.get('plan')

        body += '–ü–ª–∞–Ω –Ω–∞ –±–∏—Ç–≤—ã:\n'
        match plan:
            case list(): body += ('\n'.join([f'   {battle_time[index]}: {plan[index] if plan[index] != None else no_orders}' for index in range(len(battle_time))]) + '\n')
            case _: body += f'   {no_orders}\n'

        for key, value in {'equip': '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:\n', 'craft': '–ü—Ä–µ–¥–º–µ—Ç—ã:\n', 'arm': '–û—Ä—É–∂–∏–µ:\n'}.items():
            body += value

            for_battle = user.cache.get(f'{key}_for_battle')
            after_battle = user.cache.get(f'{key}_after_battle')

            body += '   –ù–∞ –±–∏—Ç–≤—É: '
            match for_battle:
                case list(): body += (', '.join(for_battle) + '\n')
                case _: body += f'{no_orders}\n'
                
            body += '   –ù–∞ –ø–µ—Ä–µ–º–∏—Ä–∏–µ: '
            match after_battle:
                case list(): body += (', '.join(after_battle) + '\n')
                case _: body += f'{no_orders}\n'

        await m.edit(res_header(c.name, m.text) + body)
