from asyncio import sleep
from pyrogram import Client, types
from pyrogram.filters import regex
from pyrogram.handlers import MessageHandler, EditedMessageHandler

from utils.res_header import res_header
from utils.filters import f_vegan
from constants import vegan_id, melee_weapon_text, time_for_regen


async def inline_callback(c: Client, *args):
    try:
        await c.request_callback_answer(*args)
    except:
        pass


async def attackselect_handler(c: Client, m: types.Message):
    try:
        await m.click('–ö—Ä—ã—Å–∞ 1|üê≠', timeout=1)
    except:
        pass


async def patrol(c: Client, m: types.Message, user):
    quest_message_id = user.cache.get('quests_msg')

    args = (vegan_id, quest_message_id,
            "quest_select?castle_protect", 1)

    user.scheduler.add_job(inline_callback, 'interval',
                           (c, *args), id=f'{c.name}/farm', seconds=182)

    await inline_callback(c, *args)

    if m != None:
        await m.edit(res_header(c.name, m.text) + '–ê–≤—Ç–æ–ø–∞—Ç—Ä—É–ª—å –∑–∞–ø—É—â–µ–Ω')


async def rathunt(c: Client, m: types.Message, user):
    quest_message_id = user.cache.get('quests_msg')

    args = (vegan_id, quest_message_id,
            "quest_select?rathunt", 1)

    handlers = []
    user_weapon_type = []

    attackselect = c.add_handler(EditedMessageHandler(
        attackselect_handler, f_vegan & regex(f'^–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏:$')))

    async def result_handler(c: Client, m: types.Message):
        if m.text.startswith('–í—ã –æ–¥–µ—Ä–∂–∞–ª–∏ –ø–æ–±–µ–¥—É –Ω–∞–¥ –∫—Ä—ã—Å–æ–π!'):
            await inline_callback(c, *args)
        else:
            await sleep(time_for_regen * 2)
            await inline_callback(c, *args)

    result = c.add_handler(MessageHandler(result_handler, f_vegan & regex(
        r'^(–í—ã –æ–¥–µ—Ä–∂–∞–ª–∏ –ø–æ–±–µ–¥—É –Ω–∞–¥ –∫—Ä—ã—Å–æ–π!|–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–¥–æ–ª–µ—Ç—å –∫—Ä—ã—Å—É, –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∑–∞–º–æ–∫ –∑–∞–ª–µ—á–∏–≤–∞—Ç—å —Ä–∞–Ω—ã.)\n')))

    async def turn_handler(c: Client, m: types.Message):
        await sleep(1)
        try:
            if m.text.startswith('–•–æ–¥ 1\n'):
                await sleep(1)
                cr = m.click(
                    '–ü–æ–¥–æ–π—Ç–∏') if 'melee' == user_weapon_type[0] else m.click('–ê—Ç–∞–∫–∞')
                await cr
            elif '0 —ç–Ω–µ—Ä–≥–∏–∏' not in m.text:
                await m.click('–ê—Ç–∞–∫–∞', timeout=1)
            else:
                await m.click('–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞', timeout=1)
        except:
            pass

    turn = c.add_handler(MessageHandler(
        turn_handler, f_vegan & regex(r'^–•–æ–¥ \d+\n')))

    def weaponselect_handler(c: Client, m: types.Message):
        user_selection = m.text.split('\n')[1].split(' ', 1)[1][:-6]

        if user_selection in melee_weapon_text:
            user_weapon_type.clear()
            user_weapon_type.append('melee')
        else:
            user_weapon_type.clear()
            user_weapon_type.append('long-range')

    weaponselect = c.add_handler(MessageHandler(
        weaponselect_handler, f_vegan & regex(r'^–í—ã–±–æ—Ä –æ—Ä—É–∂–∏—è:\n')))

    handlers.extend([attackselect, result, turn, weaponselect])
    user.state['rathunt_handlers'] = handlers

    await inline_callback(c, *args)
    if m != None:
        await m.edit(res_header(c.name, m.text) + '–ê–≤—Ç–æ–æ—Ö–æ—Ç–∞ –Ω–∞ –∫—Ä—ã—Å –∑–∞–ø—É—â–µ–Ω–∞')
